// абстрация string
// 1 	- 00000001
// '1' 	- 49
// "abc" - 'a' 'b' 'c' '\0'
// строки
// s[1]='a' == s[1]=97
// s1=s2
// s1=s2+s3
// size() - количество символов в строке
// s1.c_str() - для использования в Си
#include <iostream>
#include <string>
using namespace std;
int main()
{
	// 1	2	3	4	5	6	7	8
	// a	b	a	b	c	b	a	c
	// здесь есть 8 префиксов
	// собственный префикс - префикс, но не целая строка
	// таких 7 (кроме полной строки)
	// функция пи
	// P(1)=0;
	// P(2)=0; as a!=b
	// P(3)=1; as abc-> pref{a, ab}, suff={a, ba} -> a&a
	// P(4)=2;
	// P(5)=0;
	// P(6)=0;
	// P(7)=1;
	// P(8)=0;
	//
	// a	b	a	c	#	b	r	a	b	a	c	d	a	r
	// 0	0	1	0	0	0	0	1	2	3	4	0	1	0 - P function
	// если мы нашли 4, мы нашли подстроку abac 
	// abac#bra s.substr(1,8) != s.substr(2,8)
	//					(1,k-1)			(k-7,7)
	// bac#brab
	// сложность O(n^3)
	// P(k+1) <= P(k)+1
	// задача А из дз 2
	// жадный online-алгоритм с индуктивной функцией
	return 0;
}

